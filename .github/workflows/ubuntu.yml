# This is a basic workflow to help you get started with Actions

name: Ubuntu

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    strategy:

      fail-fast: false

      matrix:
        include:
          - os: ubuntu-18.04
            cuda: "11.0"

          - os: ubuntu-18.04
            cuda: "10.2"

          - os: ubuntu-18.04
            cuda: "10.1"

    env:
      build_dir: "build"
      config: "Release"

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Install BLAS & LAPACK
        run: sudo apt-get install libblas-dev liblapack-dev
        
      - name: Install SuiteSparse dependencies
        run: sudo apt-get install libgmp3-dev libmpc-dev

      - name: Cache SuiteSparse
        uses: actions/cache@v2
        id: suitesparse
        with:
          path: /usr/local/suitesparse
          key: ${{ matrix.os }}-suitesparse

      - name: Install SuiteSparse
        if: steps.suitesparse.outputs.cache-hit != 'true'
        run: source ./scripts/actions/install_suitesparse.sh

      # Use the script from https://github.com/ptheywood/cuda-cmake-github-actions
      - name: Install CUDA
        env:
          cuda: ${{ matrix.cuda }}
        run: |
          source ./scripts/actions/install_cuda_ubuntu.sh
          if [[ $? -eq 0 ]]; then
            # Set paths for subsequent steps, using ${CUDA_PATH}
            echo "Adding CUDA to CUDA_PATH, PATH and LD_LIBRARY_PATH"
            echo "CUDA_PATH=${CUDA_PATH}" >> $GITHUB_ENV
            echo "${CUDA_PATH}/bin" >> $GITHUB_PATH
            echo "LD_LIBRARY_PATH=${CUDA_PATH}/lib:${LD_LIBRARY_PATH}" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Cache SUNDIALS
        uses: actions/cache@v2
        id: sundials
        with:
          path: /usr/local/sundials
          key: ${{ matrix.os }}-sundials

      - name: Install SUNDIALS
        if: steps.sundials.outputs.cache-hit != 'true'
        run: source ./scripts/actions/install_sundials.sh

      - name: Configure cmake
        run: |
          cmake -S. -B ${{ env.build_dir }} -DCMAKE_BUILD_TYPE=${{ env.config }} \
                -DCMAKE_CUDA_ARCHITECTURES=61 -DSUNDIALS_DIR=/usr/local/sundials/lib/cmake/sundials

      - name: Build
        run: cmake --build build --verbose

      # - name: Run
      #   run: |
      #     cd build/test/
      #     ./test_singlegrid.x

